# Intro ML Group Project
from packaging import version
import sklearn

assert version.parse(sklearn.__version__) >= version.parse("1.0.1")
from pathlib import Path
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer  # Import the imputer

def load_custom_data(csv_file_path):
    return pd.read_csv(csv_file_path)

taxi_train = load_custom_data("train.csv")
taxi_test  = load_custom_data("test.csv")

# Impute missing values with the mean
imputer = SimpleImputer(strategy="mean")
taxi_train_imputed = pd.DataFrame(imputer.fit_transform(taxi_train), columns=taxi_train.columns)
taxi_test_imputed = pd.DataFrame(imputer.transform(taxi_test), columns=taxi_test.columns)

# Display the first few rows of the DataFrame after imputation
print("Imputed Taxi Train Data:")
print(taxi_train_imputed.head())

# Display the first few rows of the DataFrame after imputation for test data
print("Imputed Taxi Test Data:")
print(taxi_test_imputed.head())

# Display the info of the imputed DataFrame
print("Imputed Taxi Train Info:")
print(taxi_train_imputed.info())

# Visualize the data after imputation
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix

attributes = ["trip_duration", "distance_traveled", "num_of_passengers", "fare"]
scatter_matrix(taxi_train_imputed[attributes], figsize=(12, 8))
plt.show()

# Linear Regression
lr = LinearRegression()

X_train_imputed = taxi_train_imputed[["trip_duration"]].values
y_train_imputed = taxi_train_imputed[["fare"]].values
X_test_imputed = taxi_test_imputed[["trip_duration"]].values
y_test_imputed = taxi_test_imputed[["fare"]].values

lr.fit(X_train_imputed, y_train_imputed)
y_pred_imputed = lr.predict(X_test_imputed)

from sklearn.metrics import mean_squared_error

print("Test RMSE (Imputed): %.3f" % mean_squared_error(y_test_imputed, y_pred_imputed) ** 0.5)

# RandomForest Regression
rf = RandomForestRegressor(max_depth=5, random_state=0, n_estimators=200)

rf.fit(X_train_imputed, y_train_imputed.ravel())
y_pred_imputed_rf = rf.predict(X_test_imputed)

print("Test RMSE (Imputed): %.3f" % mean_squared_error(y_test_imputed, y_pred_imputed_rf) ** 0.5)
